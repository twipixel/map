webpackJsonp([0],{0:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();r(1);var s=r(327),a=n(s),u=r(370),f=n(u);!function(){window.onload=function(){new c}}();var c=function(){function t(){i(this,t),this.init(),this.addEvent(),this.onresize()}return o(t,[{key:"init",value:function(){this.app=new a.default}},{key:"addEvent",value:function(){window.onresize=this.onresize.bind(this),window.addEventListener("keyup",this.onkeyup.bind(this)),window.addEventListener("keydown",this.onkeydown.bind(this))}},{key:"onresize",value:function(){this.app.resize()}},{key:"getIntervalFunction",value:function(t,e){function r(){e.apply(t,i),clearTimeout(this.keyIntervalId),this.keyIntervalId=setTimeout(r.bind(this),200)}for(var n=arguments.length,i=Array(n>2?n-2:0),o=2;o<n;o++)i[o-2]=arguments[o];return r.bind(this)}},{key:"clearInterFunction",value:function(){clearTimeout(this.keyIntervalId)}},{key:"onkeydown",value:function(t){switch(t.keyCode){case f.default.UP:this.getIntervalFunction(this.app,this.app.moveCamera,"y",-1)();break;case f.default.DOWN:this.getIntervalFunction(this.app,this.app.moveCamera,"y",1)();break;case f.default.LEFT:this.getIntervalFunction(this.app,this.app.moveCamera,"x",-1)();break;case f.default.RIGHT:this.getIntervalFunction(this.app,this.app.moveCamera,"x",1)();break;case f.default.PAGE_UP:this.getIntervalFunction(this.app,this.app.moveCamera,"z",1)();break;case f.default.PAGE_DOWN:this.getIntervalFunction(this.app,this.app.moveCamera,"z",-1)();break;case f.default.NUMBER_4:this.getIntervalFunction(this.app,this.app.rotateWorld,"y",-.01)();break;case f.default.NUMBER_6:this.getIntervalFunction(this.app,this.app.rotateWorld,"y",.01)();break;case f.default.NUMBER_8:this.getIntervalFunction(this.app,this.app.rotateWorld,"x",-.01)();break;case f.default.NUMBER_2:this.getIntervalFunction(this.app,this.app.rotateWorld,"x",.01)();break;case f.default.NUMBER_7:this.getIntervalFunction(this.app,this.app.rotateWorld,"z",-.01)();break;case f.default.NUMBER_1:this.getIntervalFunction(this.app,this.app.rotateWorld,"z",.01)();break;case f.default.NUMBER_9:this.getIntervalFunction(this.app,this.app.rotateWorld,"z",-.01)();break;case f.default.NUMBER_3:this.getIntervalFunction(this.app,this.app.rotateWorld,"z",.01)();break;case f.default.NUMPAD_ADD:this.app.zoomIn();break;case f.default.NUMPAD_SUBTRACT:this.app.zoomOut();break;case f.default.NUMPAD_ENTER:this.app.zoomOut();break;case f.default.NUMBER_0:this.app.reset();break;case f.default.W:break;case f.default.S:break;case f.default.A:break;case f.default.D:}}},{key:"onkeyup",value:function(t){switch(t.keyCode){case f.default.ESCAPE:console.clear();break;case f.default.SPACE:this.app.gui.closed?this.app.gui.open():this.app.gui.close();break;case f.default.UP:case f.default.DOWN:case f.default.LEFT:case f.default.RIGHT:case f.default.PAGE_UP:case f.default.PAGE_DOWN:case f.default.NUMBER_4:case f.default.NUMBER_6:case f.default.NUMBER_8:case f.default.NUMBER_2:case f.default.NUMBER_7:case f.default.NUMBER_1:case f.default.NUMBER_9:case f.default.NUMBER_3:case f.default.NUMPAD_ADD:case f.default.NUMPAD_SUBTRACT:case f.default.W:case f.default.S:case f.default.A:case f.default.D:this.clearInterFunction();break;case f.default.BACKSPACE:}}}]),t}()},327:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},s=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(328),u=(n(a),r(355)),f=n(u),c=r(358),h=n(c),l=r(360),p=n(l),d=r(361),y=n(d),g=r(362),v=n(g),m=(r(363),r(365)),w={x:27953,y:12711,z:15},b={bus:"https://map.pstatic.net/nvb/wmts/bus/d2e364c9-b75e-4fd7-8020-c4b26f82b9ce/getTile/{x}/{y}/{z}/pbf",poi_web:"https://map.pstatic.net/nvb/wmts/poi_web/8fe6883e-5525-45f8-8f55-5e30bc4981f1/getTile/{x}/{y}/{z}/pbf",poi4osm:"https://map.pstatic.net/nvbpc/wmts/osm_naver_poi/5653e757-9bf1-4a2e-b20f-86bb4c0b9912/getTile/{x}/{y}/{z}/pbf",cctv:"https://map.pstatic.net/nvbpc/wmts/cctv/ab50b26c-842d-4be5-8b0c-46019f5e79a1/getTile/{x}/{y}/{z}/pbf",ozone:"https://map.pstatic.net/ozone/pbf/geojson/POI?x="+w.x+"&y="+w.y+" &z="+w.z+"&name=osm_naver_poi&versionCode=5653e757-9bf1-4a2e-b20f-86bb4c0b9912&pixelRatio=2&imageType=sprite&language=ko&mapType=NORMAL&quality=normal"};for(var x in b)b[x]=(0,y.default)(b[x],w);var S=function(){function t(){i(this,t),this.testPbf(b.poi_web,"poi_web"),this.testPbf(b.poi4osm,"poi4osm"),this.testOzone(b.ozone,"ozone")}return s(t,[{key:"parse",value:function(){}},{key:"testPbf",value:function(t,e){var r=this;console.time((0,v.default)(e+" 로드")),(0,p.default)({url:t,responseType:"arraybuffer"}).then(function(t){console.timeEnd((0,v.default)(e+" 로드")),console.time((0,v.default)(e+" pbf 파싱"));var n=new m.VectorTile(new h.default(t));console.timeEnd((0,v.default)(e+" pbf 파싱")),console.log(n),console.time((0,v.default)(e+" 피쳐 생성"));var i=r.getFeatures(n);console.timeEnd((0,v.default)(e+" 피쳐 생성")),console.log("features",i.features)})}},{key:"testOzone",value:function(t,e){console.time((0,v.default)(e+" 로드")),(0,p.default)({url:t,responseType:"arraybuffer"}).then(function(t){console.timeEnd((0,v.default)(e+" 로드")),console.time((0,v.default)(e+" pbf 파싱 및 피쳐 생성"));var r={type:"FeatureCollection",features:[]};r=f.default.decode(new h.default(t)),console.timeEnd((0,v.default)(e+" pbf 파싱 및 피쳐 생성")),console.log("features",r.features)})}},{key:"getFeatures",value:function(t){var e={type:"FeatureCollection",features:[]},r=Object.keys(t.layers);return Array.isArray(r)||(r=[r]),console.log("layers ("+r.length+")"),r.forEach(function(r){for(var n=t.layers[r],i=n.length,s=0;s<i;s++){var a=o({},n.feature(s).toGeoJSON(w.x,w.y,w.z));i>0&&(a.properties.layer=r),console.log("feature",a),e.features.push(a)}}),e}},{key:"resize",value:function(){}}]),t}();e.default=S},328:function(t,e,r){t.exports=r(329)},329:function(t,e,r){"use strict";function n(t){var e=new s(t),r=o(s.prototype.request,e);return i.extend(r,s.prototype,e),i.extend(r,e),r}var i=r(330),o=r(331),s=r(333),a=r(351),u=r(339),f=n(u);f.Axios=s,f.create=function(t){return n(a(f.defaults,t))},f.Cancel=r(352),f.CancelToken=r(353),f.isCancel=r(338),f.all=function(t){return Promise.all(t)},f.spread=r(354),t.exports=f,t.exports.default=f},330:function(t,e,r){"use strict";function n(t){return"[object Array]"===_.call(t)}function i(t){return"[object ArrayBuffer]"===_.call(t)}function o(t){return"undefined"!=typeof FormData&&t instanceof FormData}function s(t){var e;return e="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer}function a(t){return"string"==typeof t}function u(t){return"number"==typeof t}function f(t){return"undefined"==typeof t}function c(t){return null!==t&&"object"==typeof t}function h(t){return"[object Date]"===_.call(t)}function l(t){return"[object File]"===_.call(t)}function p(t){return"[object Blob]"===_.call(t)}function d(t){return"[object Function]"===_.call(t)}function y(t){return c(t)&&d(t.pipe)}function g(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams}function v(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}function m(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)}function w(t,e){if(null!==t&&"undefined"!=typeof t)if("object"!=typeof t&&(t=[t]),n(t))for(var r=0,i=t.length;r<i;r++)e.call(null,t[r],r,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}function b(){function t(t,r){"object"==typeof e[r]&&"object"==typeof t?e[r]=b(e[r],t):e[r]=t}for(var e={},r=0,n=arguments.length;r<n;r++)w(arguments[r],t);return e}function x(){function t(t,r){"object"==typeof e[r]&&"object"==typeof t?e[r]=x(e[r],t):"object"==typeof t?e[r]=x({},t):e[r]=t}for(var e={},r=0,n=arguments.length;r<n;r++)w(arguments[r],t);return e}function S(t,e,r){return w(e,function(e,n){r&&"function"==typeof e?t[n]=F(e,r):t[n]=e}),t}var F=r(331),M=r(332),_=Object.prototype.toString;t.exports={isArray:n,isArrayBuffer:i,isBuffer:M,isFormData:o,isArrayBufferView:s,isString:a,isNumber:u,isObject:c,isUndefined:f,isDate:h,isFile:l,isBlob:p,isFunction:d,isStream:y,isURLSearchParams:g,isStandardBrowserEnv:m,forEach:w,merge:b,deepMerge:x,extend:S,trim:v}},331:function(t,e){"use strict";t.exports=function(t,e){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return t.apply(e,r)}}},332:function(t,e){function r(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}function n(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&r(t.slice(0,0))}t.exports=function(t){return null!=t&&(r(t)||n(t)||!!t._isBuffer)}},333:function(t,e,r){"use strict";function n(t){this.defaults=t,this.interceptors={request:new s,response:new s}}var i=r(330),o=r(334),s=r(335),a=r(336),u=r(351);n.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{},t.url=arguments[0]):t=t||{},t=u(this.defaults,t),t.method=t.method?t.method.toLowerCase():"get";var e=[a,void 0],r=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){e.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){e.push(t.fulfilled,t.rejected)});e.length;)r=r.then(e.shift(),e.shift());return r},n.prototype.getUri=function(t){return t=u(this.defaults,t),o(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],function(t){n.prototype[t]=function(e,r){return this.request(i.merge(r||{},{method:t,url:e}))}}),i.forEach(["post","put","patch"],function(t){n.prototype[t]=function(e,r,n){return this.request(i.merge(n||{},{method:t,url:e,data:r}))}}),t.exports=n},334:function(t,e,r){"use strict";function n(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var i=r(330);t.exports=function(t,e,r){if(!e)return t;var o;if(r)o=r(e);else if(i.isURLSearchParams(e))o=e.toString();else{var s=[];i.forEach(e,function(t,e){null!==t&&"undefined"!=typeof t&&(i.isArray(t)?e+="[]":t=[t],i.forEach(t,function(t){i.isDate(t)?t=t.toISOString():i.isObject(t)&&(t=JSON.stringify(t)),s.push(n(e)+"="+n(t))}))}),o=s.join("&")}if(o){var a=t.indexOf("#");a!==-1&&(t=t.slice(0,a)),t+=(t.indexOf("?")===-1?"?":"&")+o}return t}},335:function(t,e,r){"use strict";function n(){this.handlers=[]}var i=r(330);n.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},n.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},n.prototype.forEach=function(t){i.forEach(this.handlers,function(e){null!==e&&t(e)})},t.exports=n},336:function(t,e,r){"use strict";function n(t){t.cancelToken&&t.cancelToken.throwIfRequested()}var i=r(330),o=r(337),s=r(338),a=r(339),u=r(349),f=r(350);t.exports=function(t){n(t),t.baseURL&&!u(t.url)&&(t.url=f(t.baseURL,t.url)),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=i.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),i.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]});var e=t.adapter||a.adapter;return e(t).then(function(e){return n(t),e.data=o(e.data,e.headers,t.transformResponse),e},function(e){return s(e)||(n(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},337:function(t,e,r){"use strict";var n=r(330);t.exports=function(t,e,r){return n.forEach(r,function(r){t=r(t,e)}),t}},338:function(t,e){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},339:function(t,e,r){(function(e){"use strict";function n(t,e){!o.isUndefined(t)&&o.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}function i(){var t;return"undefined"!=typeof e&&"[object process]"===Object.prototype.toString.call(e)?t=r(342):"undefined"!=typeof XMLHttpRequest&&(t=r(342)),t}var o=r(330),s=r(341),a={"Content-Type":"application/x-www-form-urlencoded"},u={adapter:i(),transformRequest:[function(t,e){return s(e,"Accept"),s(e,"Content-Type"),o.isFormData(t)||o.isArrayBuffer(t)||o.isBuffer(t)||o.isStream(t)||o.isFile(t)||o.isBlob(t)?t:o.isArrayBufferView(t)?t.buffer:o.isURLSearchParams(t)?(n(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):o.isObject(t)?(n(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],function(t){u.headers[t]={}}),o.forEach(["post","put","patch"],function(t){u.headers[t]=o.merge(a)}),t.exports=u}).call(e,r(340))},340:function(t,e){function r(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function i(t){if(c===setTimeout)return setTimeout(t,0);if((c===r||!c)&&setTimeout)return c=setTimeout,setTimeout(t,0);try{return c(t,0)}catch(e){try{return c.call(null,t,0)}catch(e){return c.call(this,t,0)}}}function o(t){if(h===clearTimeout)return clearTimeout(t);if((h===n||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function s(){y&&p&&(y=!1,p.length?d=p.concat(d):g=-1,d.length&&a())}function a(){if(!y){var t=i(s);y=!0;for(var e=d.length;e;){for(p=d,d=[];++g<e;)p&&p[g].run();g=-1,e=d.length}p=null,y=!1,o(t)}}function u(t,e){this.fun=t,this.array=e}function f(){}var c,h,l=t.exports={};!function(){try{c="function"==typeof setTimeout?setTimeout:r}catch(t){c=r}try{h="function"==typeof clearTimeout?clearTimeout:n}catch(t){h=n}}();var p,d=[],y=!1,g=-1;l.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];d.push(new u(t,e)),1!==d.length||y||i(a)},u.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=f,l.addListener=f,l.once=f,l.off=f,l.removeListener=f,l.removeAllListeners=f,l.emit=f,l.prependListener=f,l.prependOnceListener=f,l.listeners=function(t){return[]},l.binding=function(t){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(t){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},341:function(t,e,r){"use strict";var n=r(330);t.exports=function(t,e){n.forEach(t,function(r,n){n!==e&&n.toUpperCase()===e.toUpperCase()&&(t[e]=r,delete t[n])})}},342:function(t,e,r){"use strict";var n=r(330),i=r(343),o=r(334),s=r(346),a=r(347),u=r(344);t.exports=function(t){return new Promise(function(e,f){var c=t.data,h=t.headers;n.isFormData(c)&&delete h["Content-Type"];var l=new XMLHttpRequest;if(t.auth){var p=t.auth.username||"",d=t.auth.password||"";h.Authorization="Basic "+btoa(p+":"+d)}if(l.open(t.method.toUpperCase(),o(t.url,t.params,t.paramsSerializer),!0),l.timeout=t.timeout,l.onreadystatechange=function(){if(l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in l?s(l.getAllResponseHeaders()):null,n=t.responseType&&"text"!==t.responseType?l.response:l.responseText,o={data:n,status:l.status,statusText:l.statusText,headers:r,config:t,request:l};i(e,f,o),l=null}},l.onabort=function(){l&&(f(u("Request aborted",t,"ECONNABORTED",l)),l=null)},l.onerror=function(){f(u("Network Error",t,null,l)),l=null},l.ontimeout=function(){f(u("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",l)),l=null},n.isStandardBrowserEnv()){var y=r(348),g=(t.withCredentials||a(t.url))&&t.xsrfCookieName?y.read(t.xsrfCookieName):void 0;g&&(h[t.xsrfHeaderName]=g)}if("setRequestHeader"in l&&n.forEach(h,function(t,e){"undefined"==typeof c&&"content-type"===e.toLowerCase()?delete h[e]:l.setRequestHeader(e,t)}),t.withCredentials&&(l.withCredentials=!0),t.responseType)try{l.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&l.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){l&&(l.abort(),f(t),l=null)}),void 0===c&&(c=null),l.send(c)})}},343:function(t,e,r){"use strict";var n=r(344);t.exports=function(t,e,r){var i=r.config.validateStatus;!i||i(r.status)?t(r):e(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},344:function(t,e,r){"use strict";var n=r(345);t.exports=function(t,e,r,i,o){var s=new Error(t);return n(s,e,r,i,o)}},345:function(t,e){"use strict";t.exports=function(t,e,r,n,i){return t.config=e,r&&(t.code=r),t.request=n,t.response=i,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},346:function(t,e,r){"use strict";var n=r(330),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,r,o,s={};return t?(n.forEach(t.split("\n"),function(t){if(o=t.indexOf(":"),e=n.trim(t.substr(0,o)).toLowerCase(),r=n.trim(t.substr(o+1)),e){if(s[e]&&i.indexOf(e)>=0)return;"set-cookie"===e?s[e]=(s[e]?s[e]:[]).concat([r]):s[e]=s[e]?s[e]+", "+r:r}}),s):s}},347:function(t,e,r){"use strict";var n=r(330);t.exports=n.isStandardBrowserEnv()?function(){function t(t){var e=t;return r&&(i.setAttribute("href",e),e=i.href),i.setAttribute("href",e),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:"/"===i.pathname.charAt(0)?i.pathname:"/"+i.pathname}}var e,r=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a");return e=t(window.location.href),function(r){var i=n.isString(r)?t(r):r;return i.protocol===e.protocol&&i.host===e.host}}():function(){return function(){return!0}}()},348:function(t,e,r){"use strict";var n=r(330);t.exports=n.isStandardBrowserEnv()?function(){return{write:function(t,e,r,i,o,s){var a=[];a.push(t+"="+encodeURIComponent(e)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(i)&&a.push("path="+i),n.isString(o)&&a.push("domain="+o),s===!0&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()},349:function(t,e){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},350:function(t,e){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},351:function(t,e,r){"use strict";var n=r(330);t.exports=function(t,e){e=e||{};var r={};return n.forEach(["url","method","params","data"],function(t){"undefined"!=typeof e[t]&&(r[t]=e[t])}),n.forEach(["headers","auth","proxy"],function(i){n.isObject(e[i])?r[i]=n.deepMerge(t[i],e[i]):"undefined"!=typeof e[i]?r[i]=e[i]:n.isObject(t[i])?r[i]=n.deepMerge(t[i]):"undefined"!=typeof t[i]&&(r[i]=t[i])}),n.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],function(n){"undefined"!=typeof e[n]?r[n]=e[n]:"undefined"!=typeof t[n]&&(r[n]=t[n])}),r}},352:function(t,e){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},353:function(t,e,r){"use strict";function n(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(t){e=t});var r=this;t(function(t){r.reason||(r.reason=new i(t),e(r.reason))})}var i=r(352);n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var t,e=new n(function(e){t=e});return{token:e,cancel:t}},t.exports=n},354:function(t,e){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},355:function(t,e,r){"use strict";e.encode=r(356),e.decode=r(357)},356:function(t,e){"use strict";function r(t,e){w={},x=[],b=0,S=0,F=1,n(t),F=Math.min(F,M);for(var r=Math.ceil(Math.log(F)/Math.LN10),i=0;i<x.length;i++)e.writeStringField(1,x[i]);return 2!==S&&e.writeVarintField(2,S),6!==r&&e.writeVarintField(3,r),"FeatureCollection"===t.type?e.writeMessage(4,u,t):"Feature"===t.type?e.writeMessage(5,f,t):e.writeMessage(6,c,t),w=null,e.finish()}function n(t){var e,r;if("FeatureCollection"===t.type)for(e=0;e<t.features.length;e++)n(t.features[e]);else if("Feature"===t.type){null!==t.geometry&&n(t.geometry);for(r in t.properties)a(r)}else if("Point"===t.type)s(t.coordinates);else if("MultiPoint"===t.type)o(t.coordinates);else if("GeometryCollection"===t.type)for(e=0;e<t.geometries.length;e++)n(t.geometries[e]);else if("LineString"===t.type)o(t.coordinates);else if("Polygon"===t.type||"MultiLineString"===t.type)i(t.coordinates);else if("MultiPolygon"===t.type)for(e=0;e<t.coordinates.length;e++)i(t.coordinates[e]);for(r in t)m(r,t.type)||a(r)}function i(t){for(var e=0;e<t.length;e++)o(t[e])}function o(t){for(var e=0;e<t.length;e++)s(t[e])}function s(t){S=Math.max(S,t.length);for(var e=0;e<t.length;e++)for(;Math.round(t[e]*F)/F!==t[e]&&F<M;)F*=10}function a(t){void 0===w[t]&&(x.push(t),w[t]=b++)}function u(t,e){for(var r=0;r<t.features.length;r++)e.writeMessage(1,f,t.features[r]);h(t,e,!0)}function f(t,e){null!==t.geometry&&e.writeMessage(1,c,t.geometry),void 0!==t.id&&("number"==typeof t.id&&t.id%1===0?e.writeSVarintField(12,t.id):e.writeStringField(11,t.id)),t.properties&&h(t.properties,e),h(t,e,!0)}function c(t,e){e.writeVarintField(1,_[t.type]);var r=t.coordinates;if("Point"===t.type)p(r,e);else if("MultiPoint"===t.type)d(r,e,!0);else if("LineString"===t.type)d(r,e);else if("MultiLineString"===t.type)y(r,e);else if("Polygon"===t.type)y(r,e,!0);else if("MultiPolygon"===t.type)g(r,e);else if("GeometryCollection"===t.type)for(var n=0;n<t.geometries.length;n++)e.writeMessage(4,c,t.geometries[n]);h(t,e,!0)}function h(t,e,r){var n=[],i=0;for(var o in t)r&&m(o,t.type)||(e.writeMessage(13,l,t[o]),n.push(w[o]),n.push(i++));e.writePackedVarint(r?15:14,n)}function l(t,e){if(null!==t){var r=typeof t;"string"===r?e.writeStringField(1,t):"boolean"===r?e.writeBooleanField(5,t):"object"===r?e.writeStringField(6,JSON.stringify(t)):"number"===r&&(t%1!==0?e.writeDoubleField(2,t):t>=0?e.writeVarintField(3,t):e.writeVarintField(4,-t))}}function p(t,e){for(var r=[],n=0;n<S;n++)r.push(Math.round(t[n]*F));e.writePackedSVarint(3,r)}function d(t,e){var r=[];v(r,t),e.writePackedSVarint(3,r)}function y(t,e,r){var n,i=t.length;if(1!==i){var o=[];for(n=0;n<i;n++)o.push(t[n].length-(r?1:0));e.writePackedVarint(2,o)}var s=[];for(n=0;n<i;n++)v(s,t[n],r);e.writePackedSVarint(3,s)}function g(t,e){var r,n,i=t.length;if(1!==i||1!==t[0].length){var o=[i];for(r=0;r<i;r++)for(o.push(t[r].length),n=0;n<t[r].length;n++)o.push(t[r][n].length-1);e.writePackedVarint(2,o)}var s=[];for(r=0;r<i;r++)for(n=0;n<t[r].length;n++)v(s,t[r][n],!0);e.writePackedSVarint(3,s)}function v(t,e,r){var n,i,o=e.length-(r?1:0),s=new Array(S);for(i=0;i<S;i++)s[i]=0;for(n=0;n<o;n++)for(i=0;i<S;i++){var a=Math.round(e[n][i]*F)-s[i];t.push(a),s[i]+=a}}function m(t,e){if("type"===t)return!0;if("FeatureCollection"===e){if("features"===t)return!0}else if("Feature"===e){if("id"===t||"properties"===t||"geometry"===t)return!0}else if("GeometryCollection"===e){if("geometries"===t)return!0}else if("coordinates"===t)return!0;return!1}t.exports=r;var w,b,x,S,F,M=1e6,_={Point:0,MultiPoint:1,LineString:2,MultiLineString:3,Polygon:4,MultiPolygon:5,GeometryCollection:6}},357:function(t,e){"use strict";function r(t){x=2,S=Math.pow(10,6),b=null,m=[],w=[];var e=t.readFields(n,{});return m=null,e}function n(t,e,r){1===t?m.push(r.readString()):2===t?x=r.readVarint():3===t?S=Math.pow(10,r.readVarint()):4===t?i(r,e):5===t?o(r,e):6===t&&s(r,e)}function i(t,e){return e.type="FeatureCollection",e.features=[],t.readMessage(a,e)}function o(t,e){e.type="Feature";var r=t.readMessage(u,e);return r.hasOwnProperty("geometry")||(r.geometry=null),r}function s(t,e){return t.readMessage(f,e)}function a(t,e,r){1===t?e.features.push(o(r,{})):13===t?w.push(h(r)):15===t&&l(r,e)}function u(t,e,r){1===t?e.geometry=s(r,{}):11===t?e.id=r.readString():12===t?e.id=r.readSVarint():13===t?w.push(h(r)):14===t?e.properties=l(r,{}):15===t&&l(r,e)}function f(t,e,r){1===t?e.type=F[r.readVarint()]:2===t?b=r.readPackedVarint():3===t?c(e,r,e.type):4===t?(e.geometries=e.geometries||[],e.geometries.push(s(r,{}))):13===t?w.push(h(r)):15===t&&l(r,e)}function c(t,e,r){"Point"===r?t.coordinates=p(e):"MultiPoint"===r?t.coordinates=y(e,!0):"LineString"===r?t.coordinates=y(e):"MultiLineString"===r?t.coordinates=g(e):"Polygon"===r?t.coordinates=g(e,!0):"MultiPolygon"===r&&(t.coordinates=v(e))}function h(t){for(var e=t.readVarint()+t.pos,r=null;t.pos<e;){var n=t.readVarint(),i=n>>3;1===i?r=t.readString():2===i?r=t.readDouble():3===i?r=t.readVarint():4===i?r=-t.readVarint():5===i?r=t.readBoolean():6===i&&(r=JSON.parse(t.readString()))}return r}function l(t,e){for(var r=t.readVarint()+t.pos;t.pos<r;)e[m[t.readVarint()]]=w[t.readVarint()];return w=[],e}function p(t){for(var e=t.readVarint()+t.pos,r=[];t.pos<e;)r.push(t.readSVarint()/S);return r}function d(t,e,r,n){var i,o,s=0,a=[],u=[];for(o=0;o<x;o++)u[o]=0;for(;r?s<r:t.pos<e;){for(i=[],o=0;o<x;o++)u[o]+=t.readSVarint(),i[o]=u[o]/S;a.push(i),s++}return n&&a.push(a[0]),a}function y(t){return d(t,t.readVarint()+t.pos)}function g(t,e){var r=t.readVarint()+t.pos;if(!b)return[d(t,r,null,e)];for(var n=[],i=0;i<b.length;i++)n.push(d(t,r,b[i],e));return b=null,n}function v(t){var e=t.readVarint()+t.pos;if(!b)return[[d(t,e,null,!0)]];for(var r=[],n=1,i=0;i<b[0];i++){for(var o=[],s=0;s<b[n];s++)o.push(d(t,e,b[n+1+s],!0));n+=b[n]+1,r.push(o)}return b=null,r}t.exports=r;var m,w,b,x,S,F=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection"]},358:function(t,e,r){"use strict";function n(t){this.buf=ArrayBuffer.isView&&ArrayBuffer.isView(t)?t:new Uint8Array(t||0),this.pos=0,this.type=0,this.length=this.buf.length}function i(t,e,r){var n,i,o=r.buf;if(i=o[r.pos++],n=(112&i)>>4,i<128)return s(t,n,e);if(i=o[r.pos++],n|=(127&i)<<3,i<128)return s(t,n,e);if(i=o[r.pos++],n|=(127&i)<<10,i<128)return s(t,n,e);if(i=o[r.pos++],n|=(127&i)<<17,i<128)return s(t,n,e);if(i=o[r.pos++],n|=(127&i)<<24,i<128)return s(t,n,e);if(i=o[r.pos++],n|=(1&i)<<31,i<128)return s(t,n,e);throw new Error("Expected varint not more than 10 bytes")}function o(t){return t.type===n.Bytes?t.readVarint()+t.pos:t.pos+1}function s(t,e,r){return r?4294967296*e+(t>>>0):4294967296*(e>>>0)+(t>>>0)}function a(t,e){var r,n;if(t>=0?(r=t%4294967296|0,n=t/4294967296|0):(r=~(-t%4294967296),n=~(-t/4294967296),4294967295^r?r=r+1|0:(r=0,n=n+1|0)),t>=0x10000000000000000||t<-0x10000000000000000)throw new Error("Given varint doesn't fit into 10 bytes");e.realloc(10),u(r,n,e),f(n,e)}function u(t,e,r){r.buf[r.pos++]=127&t|128,t>>>=7,r.buf[r.pos++]=127&t|128,t>>>=7,r.buf[r.pos++]=127&t|128,t>>>=7,r.buf[r.pos++]=127&t|128,t>>>=7,r.buf[r.pos]=127&t}function f(t,e){var r=(7&t)<<4;e.buf[e.pos++]|=r|((t>>>=3)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t)))))}function c(t,e,r){var n=e<=16383?1:e<=2097151?2:e<=268435455?3:Math.floor(Math.log(e)/(7*Math.LN2));r.realloc(n);for(var i=r.pos-1;i>=t;i--)r.buf[i+n]=r.buf[i]}function h(t,e){for(var r=0;r<t.length;r++)e.writeVarint(t[r])}function l(t,e){for(var r=0;r<t.length;r++)e.writeSVarint(t[r])}function p(t,e){for(var r=0;r<t.length;r++)e.writeFloat(t[r])}function d(t,e){for(var r=0;r<t.length;r++)e.writeDouble(t[r])}function y(t,e){for(var r=0;r<t.length;r++)e.writeBoolean(t[r])}function g(t,e){for(var r=0;r<t.length;r++)e.writeFixed32(t[r])}function v(t,e){for(var r=0;r<t.length;r++)e.writeSFixed32(t[r])}function m(t,e){for(var r=0;r<t.length;r++)e.writeFixed64(t[r])}function w(t,e){for(var r=0;r<t.length;r++)e.writeSFixed64(t[r])}function b(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+16777216*t[e+3]}function x(t,e,r){t[r]=e,t[r+1]=e>>>8,t[r+2]=e>>>16,t[r+3]=e>>>24}function S(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+(t[e+3]<<24)}function F(t,e,r){for(var n="",i=e;i<r;){var o=t[i],s=null,a=o>239?4:o>223?3:o>191?2:1;if(i+a>r)break;var u,f,c;1===a?o<128&&(s=o):2===a?(u=t[i+1],128===(192&u)&&(s=(31&o)<<6|63&u,s<=127&&(s=null))):3===a?(u=t[i+1],f=t[i+2],128===(192&u)&&128===(192&f)&&(s=(15&o)<<12|(63&u)<<6|63&f,(s<=2047||s>=55296&&s<=57343)&&(s=null))):4===a&&(u=t[i+1],f=t[i+2],c=t[i+3],128===(192&u)&&128===(192&f)&&128===(192&c)&&(s=(15&o)<<18|(63&u)<<12|(63&f)<<6|63&c,(s<=65535||s>=1114112)&&(s=null))),null===s?(s=65533,a=1):s>65535&&(s-=65536,n+=String.fromCharCode(s>>>10&1023|55296),s=56320|1023&s),n+=String.fromCharCode(s),i+=a}return n}function M(t,e,r){for(var n,i,o=0;o<e.length;o++){if(n=e.charCodeAt(o),n>55295&&n<57344){if(!i){n>56319||o+1===e.length?(t[r++]=239,t[r++]=191,t[r++]=189):i=n;continue}if(n<56320){t[r++]=239,t[r++]=191,t[r++]=189,i=n;continue}n=i-55296<<10|n-56320|65536,i=null}else i&&(t[r++]=239,t[r++]=191,t[r++]=189,i=null);n<128?t[r++]=n:(n<2048?t[r++]=n>>6|192:(n<65536?t[r++]=n>>12|224:(t[r++]=n>>18|240,t[r++]=n>>12&63|128),t[r++]=n>>6&63|128),t[r++]=63&n|128)}return r}t.exports=n;var _=r(359);n.Varint=0,n.Fixed64=1,n.Bytes=2,n.Fixed32=5;var k=4294967296,P=1/k;n.prototype={destroy:function(){this.buf=null},readFields:function(t,e,r){for(r=r||this.length;this.pos<r;){var n=this.readVarint(),i=n>>3,o=this.pos;this.type=7&n,t(i,e,this),this.pos===o&&this.skip(n)}return e},readMessage:function(t,e){return this.readFields(t,e,this.readVarint()+this.pos)},readFixed32:function(){var t=b(this.buf,this.pos);return this.pos+=4,t},readSFixed32:function(){var t=S(this.buf,this.pos);return this.pos+=4,t},readFixed64:function(){var t=b(this.buf,this.pos)+b(this.buf,this.pos+4)*k;return this.pos+=8,t},readSFixed64:function(){var t=b(this.buf,this.pos)+S(this.buf,this.pos+4)*k;return this.pos+=8,t},readFloat:function(){var t=_.read(this.buf,this.pos,!0,23,4);return this.pos+=4,t},readDouble:function(){var t=_.read(this.buf,this.pos,!0,52,8);return this.pos+=8,
t},readVarint:function(t){var e,r,n=this.buf;return r=n[this.pos++],e=127&r,r<128?e:(r=n[this.pos++],e|=(127&r)<<7,r<128?e:(r=n[this.pos++],e|=(127&r)<<14,r<128?e:(r=n[this.pos++],e|=(127&r)<<21,r<128?e:(r=n[this.pos],e|=(15&r)<<28,i(e,t,this)))))},readVarint64:function(){return this.readVarint(!0)},readSVarint:function(){var t=this.readVarint();return t%2===1?(t+1)/-2:t/2},readBoolean:function(){return Boolean(this.readVarint())},readString:function(){var t=this.readVarint()+this.pos,e=F(this.buf,this.pos,t);return this.pos=t,e},readBytes:function(){var t=this.readVarint()+this.pos,e=this.buf.subarray(this.pos,t);return this.pos=t,e},readPackedVarint:function(t,e){if(this.type!==n.Bytes)return t.push(this.readVarint(e));var r=o(this);for(t=t||[];this.pos<r;)t.push(this.readVarint(e));return t},readPackedSVarint:function(t){if(this.type!==n.Bytes)return t.push(this.readSVarint());var e=o(this);for(t=t||[];this.pos<e;)t.push(this.readSVarint());return t},readPackedBoolean:function(t){if(this.type!==n.Bytes)return t.push(this.readBoolean());var e=o(this);for(t=t||[];this.pos<e;)t.push(this.readBoolean());return t},readPackedFloat:function(t){if(this.type!==n.Bytes)return t.push(this.readFloat());var e=o(this);for(t=t||[];this.pos<e;)t.push(this.readFloat());return t},readPackedDouble:function(t){if(this.type!==n.Bytes)return t.push(this.readDouble());var e=o(this);for(t=t||[];this.pos<e;)t.push(this.readDouble());return t},readPackedFixed32:function(t){if(this.type!==n.Bytes)return t.push(this.readFixed32());var e=o(this);for(t=t||[];this.pos<e;)t.push(this.readFixed32());return t},readPackedSFixed32:function(t){if(this.type!==n.Bytes)return t.push(this.readSFixed32());var e=o(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed32());return t},readPackedFixed64:function(t){if(this.type!==n.Bytes)return t.push(this.readFixed64());var e=o(this);for(t=t||[];this.pos<e;)t.push(this.readFixed64());return t},readPackedSFixed64:function(t){if(this.type!==n.Bytes)return t.push(this.readSFixed64());var e=o(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed64());return t},skip:function(t){var e=7&t;if(e===n.Varint)for(;this.buf[this.pos++]>127;);else if(e===n.Bytes)this.pos=this.readVarint()+this.pos;else if(e===n.Fixed32)this.pos+=4;else{if(e!==n.Fixed64)throw new Error("Unimplemented type: "+e);this.pos+=8}},writeTag:function(t,e){this.writeVarint(t<<3|e)},realloc:function(t){for(var e=this.length||16;e<this.pos+t;)e*=2;if(e!==this.length){var r=new Uint8Array(e);r.set(this.buf),this.buf=r,this.length=e}},finish:function(){return this.length=this.pos,this.pos=0,this.buf.subarray(0,this.length)},writeFixed32:function(t){this.realloc(4),x(this.buf,t,this.pos),this.pos+=4},writeSFixed32:function(t){this.realloc(4),x(this.buf,t,this.pos),this.pos+=4},writeFixed64:function(t){this.realloc(8),x(this.buf,t&-1,this.pos),x(this.buf,Math.floor(t*P),this.pos+4),this.pos+=8},writeSFixed64:function(t){this.realloc(8),x(this.buf,t&-1,this.pos),x(this.buf,Math.floor(t*P),this.pos+4),this.pos+=8},writeVarint:function(t){return t=+t||0,t>268435455||t<0?void a(t,this):(this.realloc(4),this.buf[this.pos++]=127&t|(t>127?128:0),void(t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=t>>>7&127)))))},writeSVarint:function(t){this.writeVarint(t<0?2*-t-1:2*t)},writeBoolean:function(t){this.writeVarint(Boolean(t))},writeString:function(t){t=String(t),this.realloc(4*t.length),this.pos++;var e=this.pos;this.pos=M(this.buf,t,this.pos);var r=this.pos-e;r>=128&&c(e,r,this),this.pos=e-1,this.writeVarint(r),this.pos+=r},writeFloat:function(t){this.realloc(4),_.write(this.buf,t,this.pos,!0,23,4),this.pos+=4},writeDouble:function(t){this.realloc(8),_.write(this.buf,t,this.pos,!0,52,8),this.pos+=8},writeBytes:function(t){var e=t.length;this.writeVarint(e),this.realloc(e);for(var r=0;r<e;r++)this.buf[this.pos++]=t[r]},writeRawMessage:function(t,e){this.pos++;var r=this.pos;t(e,this);var n=this.pos-r;n>=128&&c(r,n,this),this.pos=r-1,this.writeVarint(n),this.pos+=n},writeMessage:function(t,e,r){this.writeTag(t,n.Bytes),this.writeRawMessage(e,r)},writePackedVarint:function(t,e){e.length&&this.writeMessage(t,h,e)},writePackedSVarint:function(t,e){e.length&&this.writeMessage(t,l,e)},writePackedBoolean:function(t,e){e.length&&this.writeMessage(t,y,e)},writePackedFloat:function(t,e){e.length&&this.writeMessage(t,p,e)},writePackedDouble:function(t,e){e.length&&this.writeMessage(t,d,e)},writePackedFixed32:function(t,e){e.length&&this.writeMessage(t,g,e)},writePackedSFixed32:function(t,e){e.length&&this.writeMessage(t,v,e)},writePackedFixed64:function(t,e){e.length&&this.writeMessage(t,m,e)},writePackedSFixed64:function(t,e){e.length&&this.writeMessage(t,w,e)},writeBytesField:function(t,e){this.writeTag(t,n.Bytes),this.writeBytes(e)},writeFixed32Field:function(t,e){this.writeTag(t,n.Fixed32),this.writeFixed32(e)},writeSFixed32Field:function(t,e){this.writeTag(t,n.Fixed32),this.writeSFixed32(e)},writeFixed64Field:function(t,e){this.writeTag(t,n.Fixed64),this.writeFixed64(e)},writeSFixed64Field:function(t,e){this.writeTag(t,n.Fixed64),this.writeSFixed64(e)},writeVarintField:function(t,e){this.writeTag(t,n.Varint),this.writeVarint(e)},writeSVarintField:function(t,e){this.writeTag(t,n.Varint),this.writeSVarint(e)},writeStringField:function(t,e){this.writeTag(t,n.Bytes),this.writeString(e)},writeFloatField:function(t,e){this.writeTag(t,n.Fixed32),this.writeFloat(e)},writeDoubleField:function(t,e){this.writeTag(t,n.Fixed64),this.writeDouble(e)},writeBooleanField:function(t,e){this.writeVarintField(t,Boolean(e))}}},359:function(t,e){e.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,f=u>>1,c=-7,h=r?i-1:0,l=r?-1:1,p=t[e+h];for(h+=l,o=p&(1<<-c)-1,p>>=-c,c+=a;c>0;o=256*o+t[e+h],h+=l,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=n;c>0;s=256*s+t[e+h],h+=l,c-=8);if(0===o)o=1-f;else{if(o===u)return s?NaN:(p?-1:1)*(1/0);s+=Math.pow(2,n),o-=f}return(p?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,u,f=8*o-i-1,c=(1<<f)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=c):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),e+=s+h>=1?l/u:l*Math.pow(2,1-h),e*u>=2&&(s++,u/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(e*u-1)*Math.pow(2,i),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;t[r+p]=255&a,p+=d,a/=256,i-=8);for(s=s<<i|a,f+=i;f>0;t[r+p]=255&s,p+=d,s/=256,f-=8);t[r+p-d]|=128*y}},360:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t){var e=t.url,r=t.responseType,n=void 0===r?"json":r,i=function(){return(0,s.default)({url:e,responseType:n}).then(function(t){var e=t.data;return e})};return i()}Object.defineProperty(e,"__esModule",{value:!0}),e.default=i;var o=r(328),s=n(o)},361:function(t,e){"use strict";function r(t,e){return t.replace(n,function(t,r){var n=e[r];if(void 0===n)throw new Error("No value provided for variable "+t);return"function"==typeof n&&(n=n(e)),n})}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var n=/\{ *([\w_-]+) *\}/g},362:function(t,e){"use strict";function r(t){return n+" "+t}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var n="▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨▨ "},363:function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(e=e||30,e>f)return void console.log(t);if((0,u.default)(t))for(var r in t)console.log(r,t[r]),console.group(r+" : "+s(t[r])),i(t[r],e+1),console.groupEnd();else console.log(t)}function o(t,e){return JSON.stringify(t,null,e)}Object.defineProperty(e,"__esModule",{value:!0}),e.stringify=e.expandedLog=void 0;var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=r(364),u=n(a),f=100;e.expandedLog=i,e.stringify=o},364:function(t,e){"use strict";function r(t){return null!=t&&"object"===("undefined"==typeof t?"undefined":n(t))&&Array.isArray(t)===!1}Object.defineProperty(e,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=r},365:function(t,e,r){t.exports.VectorTile=r(366),t.exports.VectorTileFeature=r(368),t.exports.VectorTileLayer=r(367)},366:function(t,e,r){"use strict";function n(t,e){this.layers=t.readFields(i,{},e)}function i(t,e,r){if(3===t){var n=new o(r,r.readVarint()+r.pos);n.length&&(e[n.name]=n)}}var o=r(367);t.exports=n},367:function(t,e,r){"use strict";function n(t,e){this.version=1,this.name=null,this.extent=4096,this.length=0,this._pbf=t,this._keys=[],this._values=[],this._features=[],t.readFields(i,this,e),this.length=this._features.length}function i(t,e,r){15===t?e.version=r.readVarint():1===t?e.name=r.readString():5===t?e.extent=r.readVarint():2===t?e._features.push(r.pos):3===t?e._keys.push(r.readString()):4===t&&e._values.push(o(r))}function o(t){for(var e=null,r=t.readVarint()+t.pos;t.pos<r;){var n=t.readVarint()>>3;e=1===n?t.readString():2===n?t.readFloat():3===n?t.readDouble():4===n?t.readVarint64():5===n?t.readVarint():6===n?t.readSVarint():7===n?t.readBoolean():null}return e}var s=r(368);t.exports=n,n.prototype.feature=function(t){if(t<0||t>=this._features.length)throw new Error("feature index out of bounds");this._pbf.pos=this._features[t];var e=this._pbf.readVarint()+this._pbf.pos;return new s(this._pbf,e,this.extent,this._keys,this._values)}},368:function(t,e,r){"use strict";function n(t,e,r,n,o){this.properties={},this.extent=r,this.type=0,this._pbf=t,this._geometry=-1,this._keys=n,this._values=o,t.readFields(i,this,e)}function i(t,e,r){1==t?e.id=r.readVarint():2==t?o(r,e):3==t?e.type=r.readVarint():4==t&&(e._geometry=r.pos)}function o(t,e){for(var r=t.readVarint()+t.pos;t.pos<r;){var n=e._keys[t.readVarint()],i=e._values[t.readVarint()];e.properties[n]=i}}function s(t){var e=t.length;if(e<=1)return[t];for(var r,n,i=[],o=0;o<e;o++){var s=a(t[o]);0!==s&&(void 0===n&&(n=s<0),n===s<0?(r&&i.push(r),r=[t[o]]):r.push(t[o]))}return r&&i.push(r),i}function a(t){for(var e,r,n=0,i=0,o=t.length,s=o-1;i<o;s=i++)e=t[i],r=t[s],n+=(r.x-e.x)*(e.y+r.y);return n}var u=r(369);t.exports=n,n.types=["Unknown","Point","LineString","Polygon"],n.prototype.loadGeometry=function(){var t=this._pbf;t.pos=this._geometry;for(var e,r=t.readVarint()+t.pos,n=1,i=0,o=0,s=0,a=[];t.pos<r;){if(i<=0){var f=t.readVarint();n=7&f,i=f>>3}if(i--,1===n||2===n)o+=t.readSVarint(),s+=t.readSVarint(),1===n&&(e&&a.push(e),e=[]),e.push(new u(o,s));else{if(7!==n)throw new Error("unknown command "+n);e&&e.push(e[0].clone())}}return e&&a.push(e),a},n.prototype.bbox=function(){var t=this._pbf;t.pos=this._geometry;for(var e=t.readVarint()+t.pos,r=1,n=0,i=0,o=0,s=1/0,a=-(1/0),u=1/0,f=-(1/0);t.pos<e;){if(n<=0){var c=t.readVarint();r=7&c,n=c>>3}if(n--,1===r||2===r)i+=t.readSVarint(),o+=t.readSVarint(),i<s&&(s=i),i>a&&(a=i),o<u&&(u=o),o>f&&(f=o);else if(7!==r)throw new Error("unknown command "+r)}return[s,u,a,f]},n.prototype.toGeoJSON=function(t,e,r){function i(t){for(var e=0;e<t.length;e++){var r=t[e],n=180-360*(r.y+c)/u;t[e]=[360*(r.x+f)/u-180,360/Math.PI*Math.atan(Math.exp(n*Math.PI/180))-90]}}var o,a,u=this.extent*Math.pow(2,r),f=this.extent*t,c=this.extent*e,h=this.loadGeometry(),l=n.types[this.type];switch(this.type){case 1:var p=[];for(o=0;o<h.length;o++)p[o]=h[o][0];h=p,i(h);break;case 2:for(o=0;o<h.length;o++)i(h[o]);break;case 3:for(h=s(h),o=0;o<h.length;o++)for(a=0;a<h[o].length;a++)i(h[o][a])}1===h.length?h=h[0]:l="Multi"+l;var d={type:"Feature",geometry:{type:l,coordinates:h},properties:this.properties};return"id"in this&&(d.id=this.id),d}},369:function(t,e){"use strict";function r(t,e){this.x=t,this.y=e}t.exports=r,r.prototype={clone:function(){return new r(this.x,this.y)},add:function(t){return this.clone()._add(t)},sub:function(t){return this.clone()._sub(t)},multByPoint:function(t){return this.clone()._multByPoint(t)},divByPoint:function(t){return this.clone()._divByPoint(t)},mult:function(t){return this.clone()._mult(t)},div:function(t){return this.clone()._div(t)},rotate:function(t){return this.clone()._rotate(t)},rotateAround:function(t,e){return this.clone()._rotateAround(t,e)},matMult:function(t){return this.clone()._matMult(t)},unit:function(){return this.clone()._unit()},perp:function(){return this.clone()._perp()},round:function(){return this.clone()._round()},mag:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals:function(t){return this.x===t.x&&this.y===t.y},dist:function(t){return Math.sqrt(this.distSqr(t))},distSqr:function(t){var e=t.x-this.x,r=t.y-this.y;return e*e+r*r},angle:function(){return Math.atan2(this.y,this.x)},angleTo:function(t){return Math.atan2(this.y-t.y,this.x-t.x)},angleWith:function(t){return this.angleWithSep(t.x,t.y)},angleWithSep:function(t,e){return Math.atan2(this.x*e-this.y*t,this.x*t+this.y*e)},_matMult:function(t){var e=t[0]*this.x+t[1]*this.y,r=t[2]*this.x+t[3]*this.y;return this.x=e,this.y=r,this},_add:function(t){return this.x+=t.x,this.y+=t.y,this},_sub:function(t){return this.x-=t.x,this.y-=t.y,this},_mult:function(t){return this.x*=t,this.y*=t,this},_div:function(t){return this.x/=t,this.y/=t,this},_multByPoint:function(t){return this.x*=t.x,this.y*=t.y,this},_divByPoint:function(t){return this.x/=t.x,this.y/=t.y,this},_unit:function(){return this._div(this.mag()),this},_perp:function(){var t=this.y;return this.y=this.x,this.x=-t,this},_rotate:function(t){var e=Math.cos(t),r=Math.sin(t),n=e*this.x-r*this.y,i=r*this.x+e*this.y;return this.x=n,this.y=i,this},_rotateAround:function(t,e){var r=Math.cos(t),n=Math.sin(t),i=e.x+r*(this.x-e.x)-n*(this.y-e.y),o=e.y+n*(this.x-e.x)+r*(this.y-e.y);return this.x=i,this.y=o,this},_round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}},r.convert=function(t){return t instanceof r?t:Array.isArray(t)?new r(t[0],t[1]):t}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,