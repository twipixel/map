webpackJsonp([0],{0:function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}();a(1);var o=a(327),r=n(o),l=a(328),u=n(l);!function(){window.onload=function(){new c}}();var c=function(){function e(){i(this,e),this.init(),this.addEvent(),this.onresize()}return s(e,[{key:"init",value:function(){this.app=new r.default}},{key:"addEvent",value:function(){window.onresize=this.onresize.bind(this),window.addEventListener("keyup",this.onkeyup.bind(this)),window.addEventListener("keydown",this.onkeydown.bind(this))}},{key:"onresize",value:function(){this.app.resize()}},{key:"getIntervalFunction",value:function(e,t){function a(){t.apply(e,i),clearTimeout(this.keyIntervalId),this.keyIntervalId=setTimeout(a.bind(this),200)}for(var n=arguments.length,i=Array(n>2?n-2:0),s=2;s<n;s++)i[s-2]=arguments[s];return a.bind(this)}},{key:"clearInterFunction",value:function(){clearTimeout(this.keyIntervalId)}},{key:"onkeydown",value:function(e){switch(e.keyCode){case u.default.UP:this.getIntervalFunction(this.app,this.app.moveCamera,"y",-1)();break;case u.default.DOWN:this.getIntervalFunction(this.app,this.app.moveCamera,"y",1)();break;case u.default.LEFT:this.getIntervalFunction(this.app,this.app.moveCamera,"x",-1)();break;case u.default.RIGHT:this.getIntervalFunction(this.app,this.app.moveCamera,"x",1)();break;case u.default.PAGE_UP:this.getIntervalFunction(this.app,this.app.moveCamera,"z",1)();break;case u.default.PAGE_DOWN:this.getIntervalFunction(this.app,this.app.moveCamera,"z",-1)();break;case u.default.NUMBER_4:this.getIntervalFunction(this.app,this.app.rotateWorld,"y",-.01)();break;case u.default.NUMBER_6:this.getIntervalFunction(this.app,this.app.rotateWorld,"y",.01)();break;case u.default.NUMBER_8:this.getIntervalFunction(this.app,this.app.rotateWorld,"x",-.01)();break;case u.default.NUMBER_2:this.getIntervalFunction(this.app,this.app.rotateWorld,"x",.01)();break;case u.default.NUMBER_7:this.getIntervalFunction(this.app,this.app.rotateWorld,"z",-.01)();break;case u.default.NUMBER_1:this.getIntervalFunction(this.app,this.app.rotateWorld,"z",.01)();break;case u.default.NUMBER_9:this.getIntervalFunction(this.app,this.app.rotateWorld,"z",-.01)();break;case u.default.NUMBER_3:this.getIntervalFunction(this.app,this.app.rotateWorld,"z",.01)();break;case u.default.NUMPAD_ADD:this.app.zoomIn();break;case u.default.NUMPAD_SUBTRACT:this.app.zoomOut();break;case u.default.NUMPAD_ENTER:this.app.zoomOut();break;case u.default.NUMBER_0:this.app.reset();break;case u.default.W:break;case u.default.S:break;case u.default.A:break;case u.default.D:}}},{key:"onkeyup",value:function(e){switch(e.keyCode){case u.default.ESCAPE:console.clear();break;case u.default.SPACE:this.app.gui.closed?this.app.gui.open():this.app.gui.close();break;case u.default.UP:case u.default.DOWN:case u.default.LEFT:case u.default.RIGHT:case u.default.PAGE_UP:case u.default.PAGE_DOWN:case u.default.NUMBER_4:case u.default.NUMBER_6:case u.default.NUMBER_8:case u.default.NUMBER_2:case u.default.NUMBER_7:case u.default.NUMBER_1:case u.default.NUMBER_9:case u.default.NUMBER_3:case u.default.NUMPAD_ADD:case u.default.NUMPAD_SUBTRACT:case u.default.W:case u.default.S:case u.default.A:case u.default.D:this.clearInterFunction();break;case u.default.BACKSPACE:}}}]),e}()},327:function(e,t){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),i=function(){function e(){a(this,e),this.initialize(),this.loadPbf(),this.loadVector()}return n(e,[{key:"initialize",value:function(){var e=document.getElementById("map"),t=e.getContext("2d");console.log("canvas",e),console.log("ctx",t)}},{key:"loadPbf",value:function(){this.load("./../../../asset/countries/0/0/0.pbf",function(e){var t=new Pbf(new Uint8Array(e.response));console.log("pbf",t)},function(e){console.log(e.statusText)})}},{key:"loadVector",value:function(){this.load("https://tile.mapzen.com/mapzen/vector/v1/all/13/1308/3165.mvt?api_key=vector-tiles-LM25tq4",function(e){var t=new Pbf(new Uint8Array(e.response)),a=new VectorTile(t);console.log("pbf",t),console.log("tile",a);var n=10,i=["water","landuse","roads","buildings"],s={};for(var o in a.layers)s[o]=a.layers[o].toGeoJSON();var r=[];i.forEach(function(e){if(s[e])for(var t in s[e].features)s[e].features[t].properties.label_placement||n<=13&&"buildings"==e||n<=14&&"buildings"==e&&s[e].features[t].properties.area<2e3||(s[e].features[t].layer_name=e,r.push(s[e].features[t]))}),console.log("data",s),console.log("features",r)})}},{key:"load",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=new XMLHttpRequest;n.open("GET",e),n.responseType="arraybuffer",n.onreadystatechange=function(){4==n.readyState&&200==n.status&&t&&t.call(null,n)},n.onerror=function(){a&&a.call(null,n)},n.send()}},{key:"resize",value:function(){}}]),e}();t.default=i}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,